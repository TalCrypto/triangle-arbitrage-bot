// Port original Solidity code from Uniswap V3-core (TickMath.sol).
function getSqrtRatioAtTick(tick) {
    let absTick = Math.abs(tick);
    if (absTick > 887272) {
        throw new Error('T: Price is out of bounds');
    }

    let ratio = (absTick & 0x1) != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001n : 0x100000000000000000000000000000000n;
    if ((absTick & 0x2) != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213an) >> 128n;
    if ((absTick & 0x4) != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdccn) >> 128n;
    if ((absTick & 0x8) != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0n) >> 128n;
    if ((absTick & 0x10) != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644n) >> 128n;
    if ((absTick & 0x20) != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0n) >> 128n;
    if ((absTick & 0x40) != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861n) >> 128n;
    if ((absTick & 0x80) != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053n) >> 128n;
    if ((absTick & 0x100) != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4n) >> 128n;
    if ((absTick & 0x200) != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54n) >> 128n;
    if ((absTick & 0x400) != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3n) >> 128n;
    if ((absTick & 0x800) != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9n) >> 128n;
    if ((absTick & 0x1000) != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825n) >> 128n;
    if ((absTick & 0x2000) != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5n) >> 128n;
    if ((absTick & 0x4000) != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7n) >> 128n;
    if ((absTick & 0x8000) != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6n) >> 128n;
    if ((absTick & 0x10000) != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9n) >> 128n;
    if ((absTick & 0x20000) != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604n) >> 128n;
    if ((absTick & 0x40000) != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98n) >> 128n;
    if ((absTick & 0x80000) != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2n) >> 128n;
    let maxInt = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffn;
    if (tick > 0) ratio = maxInt / ratio;

    // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.
    // we then downcast because we know the result always fits within 160 bits due to our tick input constraint
    // we round up in the division so getTickAtSqrtRatio of the output price is always consistent
    sqrtPriceX96 = (ratio >> 32n) + (ratio % (1n << 32n) == 0 ? 0n : 1n);
    return sqrtPriceX96;
}


// Get the current tick from the sqrtPriceX96 (greatest integer for which the ratio is less than or equal to sqrtPriceX96).
function getTickAtSqrtRatio(sqrtPriceX96, roundDigits=3) {
    // First, we know that sqrtPriceX96 = sqrt(1.0001**tick) * 2**96.
    // So sqrtPriceX96 / 2**96 = sqrt(1.0001**tick)
    // (sqrtPriceX96 / 2**96)**2 = 1.0001**tick
    // Take the log2 of both sides, we get log2((sqrtPriceX96 / 2**96)**2) = log2(1.0001**tick)
    // It follows that 2*log2(sqrtPriceX96 / 2**96) = tick * log2(1.0001)
    // tick = 2*log2(sqrtPriceX96 / 2**96) / log2(1.0001)
    // tick = 2*(log2(sqrtPriceX96) - 96) / log2(1.0001)

    let tick = 2 * (Math.log2(Number(sqrtPriceX96)) - 96) / Math.log2(1.0001);
    tick = Math.floor(Math.round(tick*10**roundDigits)/10**roundDigits);

    if (tick < -887272 || tick > 887272) {
        throw new Error('T: Price is out of bounds');
    }

    return tick;
    
    // let floatCurrentTick = (Math.log2(Number(sqrtPriceX96))-96) / Math.log2(Math.sqrt(1.0001));
    // return Math.floor(tick);
}
let ratios = [
    735762157900595898941408213465054270n,
    736870992477878108144409327458480134n,
    77215804335698547714634158351081754n,
    386341994867677210000968646656n,
    9611096937377581937944811685281792n,
    386411401744467667382813150727n,
    9611055492637214965606341127090938n,
    79224790887150024391848473177n,
    9610585205203672900425001548434949n,
    79224791898649647774744441175n,
    386511237796195221736262933043n,
    386644301276595833090389049344n,
    3187350066489449820999570n,
    386928561340168200588936347648n,
    79224793502192617471384475469n,
    19804034335940635164361339477n,
    386922915751589521484368153076n,
    158981657377398787585432650936646155n,
    79224794456049469488453580119n,
    159066485967199501879475834051025977n,
    9253220167531270362027492n,
    9253587539892020095604370n,
    9314187179379812931283106n,
    159222755127821405055377809475883817n,
    9589921492559909160642081246188155n,
    79224796059592439185093614413n,
    79224797088151391229782086054n,
    1969214685216152125296653085664573n,
    32656292917577711621123492362960032n,
    1312569478688419746617477495506n,
    1969190728626634210817402084459768n,
    32656674521832065867403826370282380n,
    79224796228391910818124535994n,
    79228401358919734214525885293329761n,
    1969252429652314896842934743219426n,
    79224796281767803006457390544n,
    79224797249270669747957468565n,
    378193333205083560086655392736971420n,
    77215804044621303198572063015297739n,
    79224798185771751749492203611n,
    79311342848208396285937133038n,
    3947003279537342400268645453297181028n,
    1969314130677995582945132817550829n,
    79228263188906435705991673239266612n,
    79224798108302121719635794696n,
    79224798753439699498097834581n,
    79224800441231905544783893503n,
    732048890482703497530727528073779164n,
    79224802896522946208095202824n,
    1969299943603279960396855818441961n,
    32656900507591193839519482905270156n,
    1969299945808923490419705211436047n,
    79256725232858665173451538677158079n,
    79224841276502162319503551041n,
    79224842136175659140534539621n,
    261918400401905699246123182110045964n,
    79224842345964241242192047918n,
    10541563812023475982012054754727n,
    79224842311858965278301427757n,
    1969316914056353072412754993458204n,
    1969361646829371118799740677146792n,
    79224842568872464528835158610n,
    1969378603724714005157310550687685n,
    79224844172385028276689839975n,
    727293555507298470544210019681868649n,
    1969413547668333212161444582073625n,
    79311351379361924036282571088n,
    1969475248688780840515958208022468n,
    77215857627634583227486867363152070n,
    79224843204977766702631286903n,
    1969473889798976256739312491413734n,
    79224842238286786108555195770n,
    726181322819427791678000105695020775n,
    723590390776952239393608869926769929n,
    1313914813337655860047501638054n,
    1969710903120748985541573605078932n,
    902596471480759442187410634163897585n,
    1969743207398088491242192806740808n,
    77215847577848606164439310227776797n,
    79224842315748663081987662584n,
    79224843919261226829842343949n,
    9615711013197270847652316412438550n,
    79224844885855529017073913435n,
    79224846489368092764928594800n,
    9615689524139485574795642947971921n,
    9615655279226807534922358513835550n,
    9615641902959562299363655372879789n,
    77215845551374927715506359249981243n,
    32657673129982111685837549332258050n,
    1969951104838210984765763489966336n,
    3186390243816577754643507n,
    1970002106410958554096281218574931n,
    1970041738511157312741247669722747n,
    715537294960665023004424063960605609n,
    719405884555667966901053178579893510n,
    1970076808462707619515505755710071n,
    1970104232816449031668617730357280n,
    1970127285455147528507102273832816n,
    1970135795965084401533240339970353n,
    159334703510873367615524336644182013n,
    1313532431718716970769187884805n,
    79224846489357881790366373998n,
    112151475680623678391572n,
    1313772970081560320597352857455n,
    1970203753866559387890434473792532n,
    79224854620010977531599881347n,
    149405638105645109588188692099769622n,
    146630879710585387472667656008376520n,
    1313000506479922115630191936068n,
    715381867206525681521716873568858268n,
    79224854599507597953679808940n,
    9619302703666464748544872722798354n,
    79224854135569031469014246980n,
    79228263295954870474003549333111373n,
    64155966027139940457095864752417643n,
    1970247476992797039703081812756160n,
    1313636879825971838710290444074n,
    1970254979717834857605052501305343n,
    1313500889292691298110373005081n,
    711408251089656119665406246091873018n,
    1970405962842746707373510671678639n,
    73470724569398395257807n,
    28904328029643930684701508673134471n,
    64149535803580783936026455826738246n,
    1970455990824575223291165220594142n,
    79224855050548504270253953386n,
    79224856654061068018108634751n,
    1970466300710228811184166313953230n,
    79224855680279898423203105867n,
    79224855680290099576315607525n,
    79224859085146621770735158900n,
    28919887622918233742830330000825599n,
    9674882156442548488045469590092552n,
    77215833826628542884916937254741935n,
    79224859085136901859292242484n,
    79224858284565291187092215118n,
    79224857369677246530842878141n,
    2075821943334550593042283205678010n,
    79224901604930057604526028997n,
    79224903205886562563258637247n,
    79224904179570345876296991325n,
    79224900442884224080817624855n,
    9619288384659195575355961081466836n,
    79224901374814954610538246815n,
    1970490081107443742318337102090407n,
    79224901374824664656331883924n,
    1970490578645873885863548467119677n,
    3185715598493540582251016n,
    79224900442987134684276861472n,
    3184970280168197877023782n,
];

let ticks = [
    320897n,
    320927n,
    275809n,
    31689n,
    234133n,
    31693n,
    234133n,
    -1n,
    234132n,
    -1n,
    31698n,
    31705n,
    -202429n,
    31719n,
    -1n,
    -27731n,
    31719n,
    290253n,
    -1n,
    290264n,
    -181112n,
    -181111n,
    -180981n,
    290284n,
    234089n,
    -1n,
    -1n,
    202426n,
    258597n,
    56151n,
    202426n,
    258597n,
    -1n,
    276324n,
    202426n,
    -1n,
    -1n,
    307587n,
    275809n,
    -1n,
    20n,
    354495n,
    202427n,
    276324n,
    -1n,
    -1n,
    -1n,
    320796n,
    -1n,
    202427n,
    258597n,
    202427n,
    276331n,
    -1n,
    -1n,
    300239n,
    -1n,
    97819n,
    -1n,
    202427n,
    202427n,
    -1n,
    202428n,
    -1n,
    320666n,
    202428n,
    20n,
    202429n,
    275809n,
    -1n,
    202429n,
    -1n,
    320635n,
    320564n,
    56171n,
    202431n,
    324985n,
    202431n,
    275809n,
    -1n,
    -1n,
    234143n,
    -1n,
    -1n,
    234143n,
    234143n,
    234143n,
    275809n,
    258598n,
    202433n,
    -202435n,
    202434n,
    202434n,
    320340n,
    320448n,
    202435n,
    202435n,
    202435n,
    202435n,
    290298n,
    56165n,
    -1n,
    -269374n,
    56169n,
    202436n,
    -1n,
    289011n,
    288636n,
    56157n,
    320335n,
    -1n,
    234150n,
    -1n,
    276324n,
    272103n,
    202436n,
    56167n,
    202436n,
    56165n,
    320224n,
    202438n,
    -277833n,
    256156n,
    272101n,
    202438n,
    -1n,
    -1n,
    202439n,
    -1n,
    -1n,
    -1n,
    256166n,
    234265n,
    275809n,
    -1n,
    -1n,
    -1n,
    203480n,
    -1n,
    -1n,
    -1n,
    -1n,
    234150n,
    -1n,
    202439n,
    -1n,
    202439n,
    -202439n,
    -1n,
    -202444n,
]

// console.log("get ratio from tick: ", getSqrtRatioAtTick(tick));
for (let i = 0; i < ratios.length; i++) {
    // console.log("get tick from ratio: ", getTickAtSqrtRatio(ratios[i]));
    let res = getTickAtSqrtRatio(ratios[i]);
    if (res != ticks[i]) {
        console.log("ERROR: ", i, ratios[i], res, ticks[i]);
    }
}
